// main.js
import * as THREE from './libs/three.module.js';

// --- 顶层变量声明 ---
let scene, camera, renderer, figureGroup, ground;
let ambientLight, directionalLight;
let capturer = null;
let isRecording = false;
let currentFrame = 0;
let totalAnimFrames = 300;
let targetFPS = 30;

// --- 动画状态 ---
// 人物
const baseFigureBodyHeight = 0.9;
const baseFigureHeadRadius = 0.25;
let initialFigurePosition = new THREE.Vector3(); // 人物初始位置
let figureActionSegments = [];
let actualFigurePosX, actualFigurePosY, actualFigurePosZ;
// 相机
let cameraActionSegments = [];
let actualCamDistance, actualCamElevationRad, actualCamAzimuthRad,
    actualPanX, actualPanY, actualFov, actualCamRollRad;

// --- 预览功能 ---
let isPreviewing = false;
let previewAnimationRequest;

// --- HTML 元素引用 ---
let canvasEl, numFramesInput, figureScaleInput, lookAtHeightOffsetInput,
    initialDistanceInput, initialElevationDegInput, initialAzimuthDegInput,
    fovInput, outputFormatInput, videoWidthInput, videoHeightInput,
    fpsInput, startButton, statusDiv, progressBar, dragHandle;

// 动态UI
let cameraFollowModeSelect,
    numCameraActionSlotsInput, updateCameraSlotsButton, cameraSegmentsContainer,
    numFigureActionSlotsInput, updateFigureSlotsButton, figureSegmentsContainer,
    previewPlayPauseButton, previewStopButton, previewScrubber, previewFrameCounter;

// --- 工具函数 ---
const lerp = (a, b, t) => a * (1 - t) + b * t;
const EasingFunctions = {
    linear: t => t,
    easeInQuad: t => t * t,
    easeOutQuad: t => t * (2 - t),
    easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,
    easeInCubic: t => t * t * t,
    easeOutCubic: t => (--t) * t * t + 1,
    easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,
};

// --- UI 生成函数 ---
function createCameraActionHTML(count) {
    const typeOptions = `<option value="none">无</option><option value="distance">距离</option><option value="elevation">海拔角</option><option value="azimuth">方位角</option><option value="panX">Pan X</option><option value="panY">Pan Y</option><option value="fov">FOV</option><option value="roll">镜头旋转</option>`;
    return createSegmentTableHTML('camera', count, typeOptions);
}

function createFigureActionHTML(count) {
    const typeOptions = `<option value="none">无</option><option value="x_pos">X 位移</option><option value="y_pos">Y 位移</option><option value="z_pos">Z 位移</option>`;
    return createSegmentTableHTML('figure', count, typeOptions);
}

function createSegmentTableHTML(prefix, count, typeOptions) {
    let tableHTML = `<table><thead><tr><th>#</th><th>启用</th><th>类型</th><th>起始帧</th><th>结束帧</th><th>起始值</th><th>结束值</th><th>缓动</th></tr></thead><tbody>`;
    const easingOptions = Object.keys(EasingFunctions).map(n => `<option value="${n}">${n.charAt(0).toUpperCase() + n.slice(1)}</option>`).join('');
    for (let i = 0; i < count; i++) {
        tableHTML += `<tr>
            <td>${i + 1}</td>
            <td><input type="checkbox" id="${prefix}_${i}_enabled"></td>
            <td><select id="${prefix}_${i}_type">${typeOptions}</select></td>
            <td><input type="number" id="${prefix}_${i}_startFrame" value="0" min="0"></td>
            <td><input type="number" id="${prefix}_${i}_endFrame" value="0" min="0"></td>
            <td><input type="number" id="${prefix}_${i}_startValue" value="0" step="any"></td>
            <td><input type="number" id="${prefix}_${i}_endValue" value="0" step="any"></td>
            <td><select id="${prefix}_${i}_easing">${easingOptions}</select></td>
        </tr>`;
    }
    return tableHTML + `</tbody></table>`;
}

// --- 参数解析函数 ---
function parseSegmentsFromHTML(prefix, count) {
    const segments = [];
    for (let i = 0; i < count; i++) {
        const enabled = document.getElementById(`${prefix}_${i}_enabled`);
        if (enabled && enabled.checked) {
            const type = document.getElementById(`${prefix}_${i}_type`).value;
            if (type === "none") continue;
            const startFrame = parseInt(document.getElementById(`${prefix}_${i}_startFrame`).value);
            const endFrame = parseInt(document.getElementById(`${prefix}_${i}_endFrame`).value);
            const startValue = parseFloat(document.getElementById(`${prefix}_${i}_startValue`).value);
            const endValue = parseFloat(document.getElementById(`${prefix}_${i}_endValue`).value);
            const easing = document.getElementById(`${prefix}_${i}_easing`).value;
            if (isNaN(startFrame) || isNaN(endFrame) || isNaN(startValue) || isNaN(endValue) || startFrame > endFrame) continue;
            const segment = { type, startFrame, endFrame, easing };
            if (['elevation', 'azimuth', 'roll'].includes(type)) {
                segment.startValueDeg = startValue;
                segment.endValueDeg = endValue;
            } else {
                segment.startValue = startValue;
                segment.endValue = endValue;
            }
            segments.push(segment);
        }
    }
    return segments;
}

// --- 核心动画逻辑 ---
function createFigure(scale) {
    if (figureGroup && figureGroup.parent) {
        scene.remove(figureGroup);
        figureGroup.traverse(child => {
            if (child.isMesh) {
                child.geometry?.dispose();
                child.material?.dispose();
            }
        });
    }
    figureGroup = new THREE.Group();
    const headRadius = baseFigureHeadRadius * scale;
    const bodyHeight = baseFigureBodyHeight * scale;
    const bodyWidth = 0.5 * scale;
    const bodyDepth = 0.25 * scale;
    const limbLength = 0.6 * scale;
    const limbRadius = 0.08 * scale;
    const headMat = new THREE.MeshStandardMaterial({ color: 0xffff00, roughness: 0.6 });
    const bodyMat = new THREE.MeshStandardMaterial({ color: 0x00ff00, roughness: 0.7 });
    const limbMat = new THREE.MeshStandardMaterial({ color: 0xff0000, roughness: 0.5 });

    // 修正点1：正确创建和添加头部
    const head = new THREE.Mesh(new THREE.SphereGeometry(headRadius, 32, 16), headMat);
    head.position.y = bodyHeight / 2 + headRadius;
    figureGroup.add(head);

    figureGroup.add(new THREE.Mesh(new THREE.BoxGeometry(bodyWidth, bodyHeight, bodyDepth), bodyMat));

    [
        { x: -bodyWidth / 2 - limbRadius, y: bodyHeight / 2 - limbLength * 0.3, arm: true },
        { x: bodyWidth / 2 + limbRadius, y: bodyHeight / 2 - limbLength * 0.3, arm: true },
        { x: -bodyWidth / 4, y: -bodyHeight / 2, arm: false },
        { x: bodyWidth / 4, y: -bodyHeight / 2, arm: false }
    ].forEach(p => {
        const limb = new THREE.Mesh(new THREE.CylinderGeometry(limbRadius, limbRadius, limbLength, 16), limbMat);
        limb.position.set(p.x, p.y - (p.arm ? limbLength / 2 : 0), 0);
        figureGroup.add(limb);
    });
    figureGroup.traverse(o => { if (o.isMesh) o.castShadow = true; });
    
    // Y轴的计算逻辑修正，确保人物初始脚踩在地面上
    const figureHeight = bodyHeight + limbLength;
    initialFigurePosition.set(0, (bodyHeight / 2 + limbLength) - (bodyHeight / 2) + 0.01, 0);
    figureGroup.position.copy(initialFigurePosition);
    scene.add(figureGroup);
}

function initThreeJS(forRecording = false) {
    const width = parseInt(videoWidthInput.value);
    const height = parseInt(videoHeightInput.value);

    if (!renderer || renderer.domElement.width !== width || renderer.domElement.height !== height) {
        if (renderer) renderer.dispose();
        renderer = new THREE.WebGLRenderer({ canvas: canvasEl, antialias: true, preserveDrawingBuffer: true });
        renderer.setSize(width, height);
        renderer.setPixelRatio(window.devicePixelRatio > 1 && !forRecording ? 2 : 1);
    }
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    if (scene) {
        while (scene.children.length > 0) {
            const object = scene.children[0];
            if (object.geometry) object.geometry.dispose();
            if (object.material) {
                if (Array.isArray(object.material)) {
                    object.material.forEach(material => material.dispose());
                } else {
                    object.material.dispose();
                }
            }
            if (object.texture) object.texture.dispose();
            scene.remove(object);
        }
        if (scene.background) scene.background.dispose();
    }
    scene = new THREE.Scene();

    const aspect = width / height;
    const initialFov = parseFloat(fovInput.value);
    if (!camera || camera.aspect !== aspect) {
        camera = new THREE.PerspectiveCamera(initialFov, aspect, 0.1, 3000);
    } else {
        camera.fov = initialFov;
        camera.aspect = aspect;
        camera.updateProjectionMatrix();
    }

    scene.add(new THREE.AmbientLight(0xffffff, 0.8));
    directionalLight = new THREE.DirectionalLight(0xffffff, 1.5);
    directionalLight.position.set(25, 40, 30);
    directionalLight.castShadow = true;
    Object.assign(directionalLight.shadow.camera, { near: 0.5, far: 150, left: -50, right: 50, top: 50, bottom: -50 });
    directionalLight.shadow.mapSize.set(2048, 2048);
    directionalLight.shadow.bias = -0.0005;
    scene.add(directionalLight);

    createFigure(parseFloat(figureScaleInput.value));

    const groundSize = 100;
    ground = new THREE.Mesh(new THREE.PlaneGeometry(groundSize, groundSize), new THREE.MeshStandardMaterial({ color: 0x666666, roughness: 0.95 }));
    ground.rotation.x = -Math.PI / 2;
    ground.receiveShadow = true;
    scene.add(ground);

    // 修正点2：正确创建和添加网格辅助器
    const gridHelper = new THREE.GridHelper(groundSize, groundSize / 2, 0x000000, 0x404040);
    gridHelper.position.y = 0.01;
    scene.add(gridHelper);

    new THREE.CubeTextureLoader().setPath('textures/skybox/').load(['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'],
        tex => { scene.background = tex; renderSingleFrame(); }, undefined,
        () => { scene.background = new THREE.Color(0x607d8b); renderSingleFrame(); });
    
    const distMat = new THREE.MeshStandardMaterial({ color: 0x95a5a6, roughness: 0.9 });
    for (let i = 0; i < 30; i++) {
        const s = Math.random() * 6 + 4;
        const angle = Math.random() * Math.PI * 2;
        const dist = groundSize / 2 * (0.8 + Math.random() * 0.4);
        const o = new THREE.Mesh(new THREE.BoxGeometry(s, s, s), distMat);
        o.position.set(Math.cos(angle) * dist, s / 2, Math.sin(angle) * dist);
        o.castShadow = o.receiveShadow = true;
        scene.add(o);
    }

    if (forRecording || !isPreviewing) {
        resetAllAnimationStates();
    }
    updateAndRenderFrame(currentFrame);
}

function resetAllAnimationStates() {
    actualFigurePosX = initialFigurePosition.x;
    actualFigurePosY = initialFigurePosition.y;
    actualFigurePosZ = initialFigurePosition.z;
    actualCamDistance = parseFloat(initialDistanceInput.value);
    actualCamElevationRad = parseFloat(initialElevationDegInput.value) * (Math.PI / 180);
    actualCamAzimuthRad = parseFloat(initialAzimuthDegInput.value) * (Math.PI / 180);
    actualPanX = 0;
    actualPanY = 0;
    actualFov = parseFloat(fovInput.value);
    actualCamRollRad = 0;
}

function updateAndRenderFrame(frame) {
    if (!figureGroup || !scene) return;
    
    resetAllAnimationStates();
    
    for (let f = 0; f <= frame; f++) {
        let frameTargetFigX = actualFigurePosX, frameTargetFigY = actualFigurePosY, frameTargetFigZ = actualFigurePosZ;
        let frameTargetDist = actualCamDistance, frameTargetElev = actualCamElevationRad, frameTargetAzim = actualCamAzimuthRad;
        let frameTargetPanX = actualPanX, frameTargetPanY = actualPanY, frameTargetFov = actualFov, frameTargetRoll = actualCamRollRad;

        const applySegments = (segments, states) => {
            segments.forEach(seg => {
                if (f >= seg.startFrame && f <= seg.endFrame) {
                    const progress = seg.endFrame === seg.startFrame ? 1 : (f - seg.startFrame) / (seg.endFrame - seg.startFrame);
                    const eased = EasingFunctions[seg.easing](progress);
                    let startRad, endRad;
                    switch (seg.type) {
                        case 'x_pos': states.figX = lerp(seg.startValue, seg.endValue, eased); break;
                        case 'y_pos': states.figY = lerp(initialFigurePosition.y + seg.startValue, initialFigurePosition.y + seg.endValue, eased); break;
                        case 'z_pos': states.figZ = lerp(seg.startValue, seg.endValue, eased); break;
                        case 'distance': states.dist = lerp(seg.startValue, seg.endValue, eased); break;
                        case 'panX': states.panX = lerp(seg.startValue, seg.endValue, eased); break;
                        case 'panY': states.panY = lerp(seg.startValue, seg.endValue, eased); break;
                        case 'fov': states.fov = lerp(seg.startValue, seg.endValue, eased); break;
                        case 'elevation': startRad = seg.startValueDeg * (Math.PI / 180); endRad = seg.endValueDeg * (Math.PI / 180); states.elev = lerp(startRad, endRad, eased); break;
                        case 'azimuth': startRad = seg.startValueDeg * (Math.PI / 180); endRad = seg.endValueDeg * (Math.PI / 180); states.azim = lerp(startRad, endRad, eased); break;
                        case 'roll': startRad = seg.startValueDeg * (Math.PI / 180); endRad = seg.endValueDeg * (Math.PI / 180); states.roll = lerp(startRad, endRad, eased); break;
                    }
                }
            });
        };
        
        let figStates = { figX: frameTargetFigX, figY: frameTargetFigY, figZ: frameTargetFigZ };
        applySegments(figureActionSegments, figStates);
        actualFigurePosX = figStates.figX; actualFigurePosY = figStates.figY; actualFigurePosZ = figStates.figZ;

        let camStates = { dist: frameTargetDist, elev: frameTargetElev, azim: frameTargetAzim, panX: frameTargetPanX, panY: frameTargetPanY, fov: frameTargetFov, roll: frameTargetRoll };
        applySegments(cameraActionSegments, camStates);
        actualCamDistance = camStates.dist; actualCamElevationRad = camStates.elev; actualCamAzimuthRad = camStates.azim;
        actualPanX = camStates.panX; actualPanY = camStates.panY; actualFov = camStates.fov; actualCamRollRad = camStates.roll;
    }

    figureGroup.position.set(actualFigurePosX, actualFigurePosY, actualFigurePosZ);

    const followMode = cameraFollowModeSelect.value;
    const baseLookAtTarget = (followMode === 'follow') ? figureGroup.position : initialFigurePosition;

    const scale = parseFloat(figureScaleInput.value);
    const verticalOffset = parseFloat(lookAtHeightOffsetInput.value);
    const targetCenterY = baseLookAtTarget.y - (initialFigurePosition.y - (baseFigureBodyHeight * scale / 2)) + verticalOffset;
    
    const finalLookAtTarget = new THREE.Vector3(
        baseLookAtTarget.x + actualPanX,
        targetCenterY + actualPanY,
        baseLookAtTarget.z
    );

    actualCamElevationRad = Math.max(-Math.PI / 2 + 0.01, Math.min(Math.PI / 2 - 0.01, actualCamElevationRad));
    actualCamDistance = Math.max(0.2 * scale, actualCamDistance);
    if (camera.fov !== actualFov) { camera.fov = actualFov; camera.updateProjectionMatrix(); }

    const camX = finalLookAtTarget.x + actualCamDistance * Math.cos(actualCamElevationRad) * Math.sin(actualCamAzimuthRad);
    const camY = finalLookAtTarget.y + actualCamDistance * Math.sin(actualCamElevationRad);
    const camZ = finalLookAtTarget.z + actualCamDistance * Math.cos(actualCamElevationRad) * Math.cos(actualCamAzimuthRad);
    camera.position.set(camX, camY, camZ);
    
    const forward = new THREE.Vector3().subVectors(finalLookAtTarget, camera.position).normalize();
    camera.up.set(0, 1, 0).applyQuaternion(new THREE.Quaternion().setFromAxisAngle(forward, actualCamRollRad));
    camera.lookAt(finalLookAtTarget);
    renderSingleFrame();
}

function renderSingleFrame() { if (renderer && scene && camera) renderer.render(scene, camera); }

function animateAndRecord() { if (!isRecording) return; if (currentFrame >= totalAnimFrames) { stopRecording(); return; } statusDiv.textContent = `渲染中: ${currentFrame + 1}/${totalAnimFrames}`; progressBar.value = ((currentFrame + 1) / totalAnimFrames) * 100; updateAndRenderFrame(currentFrame); capturer?.capture(renderer.domElement); currentFrame++; if (isRecording) setTimeout(animateAndRecord, 1); }
function startRecording() { if (isRecording) return; stopPreview(); figureActionSegments = parseSegmentsFromHTML('figure', parseInt(numFigureActionSlotsInput.value)); cameraActionSegments = parseSegmentsFromHTML('camera', parseInt(numCameraActionSlotsInput.value)); currentFrame = 0; totalAnimFrames = parseInt(numFramesInput.value); targetFPS = parseInt(fpsInput.value); initThreeJS(true); isRecording = true; startButton.disabled = true; startButton.textContent = "录制中..."; progressBar.style.display = 'block'; progressBar.value = 0; statusDiv.textContent = '初始化录制...'; const format = outputFormatInput.value; if (format === 'webm') capturer = new CCapture({ format: 'webm', framerate: targetFPS, quality: 90, workersPath: 'libs/' }); else if (format === 'png_sequence') capturer = new CCapture({ format: 'png', framerate: targetFPS }); else return; capturer.start(); statusDiv.textContent = '开始录制...'; animateAndRecord(); }
function stopRecording() { if (!isRecording && !capturer) return; isRecording = false; startButton.disabled = false; startButton.textContent = "开始生成并导出"; progressBar.style.display = 'none'; if (capturer) { statusDiv.textContent = '处理视频/帧序列...'; capturer.stop(); capturer.save(blob => { if (!blob) { statusDiv.textContent = '错误:处理视频失败。'; capturer = null; requestPreviewUpdate(); return; } const ext = outputFormatInput.value === 'webm' ? 'webm' : 'tar'; const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = `animation_${Date.now()}.${ext}`; a.click(); URL.revokeObjectURL(a.href); statusDiv.textContent = `导出完成: ${a.download}`; capturer = null; requestPreviewUpdate(); }); } else { requestPreviewUpdate(); } }
function previewLoop() { if (!isPreviewing) return; updateAndRenderFrame(currentFrame); updatePreviewUI(); currentFrame++; if (currentFrame >= totalAnimFrames) currentFrame = 0; previewAnimationRequest = requestAnimationFrame(previewLoop); }
function togglePreview() { isPreviewing ? pausePreview() : playPreview(); }
function playPreview() { if (isRecording) return; isPreviewing = true; previewPlayPauseButton.textContent = '❚❚ 暂停预览'; statusDiv.textContent = '预览播放中...'; figureActionSegments = parseSegmentsFromHTML('figure', parseInt(numFigureActionSlotsInput.value)); cameraActionSegments = parseSegmentsFromHTML('camera', parseInt(numCameraActionSlotsInput.value)); totalAnimFrames = parseInt(numFramesInput.value); updateScrubberMax(); if (currentFrame >= totalAnimFrames) currentFrame = 0; cancelAnimationFrame(previewAnimationRequest); previewLoop(); }
function pausePreview() { isPreviewing = false; cancelAnimationFrame(previewAnimationRequest); previewPlayPauseButton.textContent = '▶ 播放预览'; statusDiv.textContent = '预览已暂停。'; }
function stopPreview() { pausePreview(); currentFrame = 0; updateAndRenderFrame(currentFrame); updatePreviewUI(); statusDiv.textContent = '预览已停止。'; }
function updatePreviewUI() { previewScrubber.value = currentFrame; previewFrameCounter.textContent = `帧: ${currentFrame}/${totalAnimFrames}`; }
function updateScrubberMax() { totalAnimFrames = parseInt(numFramesInput.value); previewScrubber.max = totalAnimFrames > 0 ? totalAnimFrames - 1 : 0; updatePreviewUI(); }
let debounceTimeout; function requestPreviewUpdate() { if (isRecording) return; stopPreview(); clearTimeout(debounceTimeout); debounceTimeout = setTimeout(() => { figureActionSegments = parseSegmentsFromHTML('figure', parseInt(numFigureActionSlotsInput.value)); cameraActionSegments = parseSegmentsFromHTML('camera', parseInt(numCameraActionSlotsInput.value)); currentFrame = 0; initThreeJS(false); updateScrubberMax(); statusDiv.textContent = '参数已更新。预览已刷新。'; }, 300); }
function handleUpdateCameraSlotsClick() { stopPreview(); cameraSegmentsContainer.innerHTML = createCameraActionHTML(parseInt(numCameraActionSlotsInput.value)); bindDynamicSegmentListeners('camera', parseInt(numCameraActionSlotsInput.value)); requestPreviewUpdate(); }
function handleUpdateFigureSlotsClick() { stopPreview(); figureSegmentsContainer.innerHTML = createFigureActionHTML(parseInt(numFigureActionSlotsInput.value)); bindDynamicSegmentListeners('figure', parseInt(numFigureActionSlotsInput.value)); requestPreviewUpdate(); }
function bindDynamicSegmentListeners(prefix, count) { for (let i = 0; i < count; i++) { ['enabled', 'type', 'startFrame', 'endFrame', 'startValue', 'endValue', 'easing'].forEach(p => { const elem = document.getElementById(`${prefix}_${i}_${p}`); if (elem) elem.addEventListener('change', requestPreviewUpdate); }); } }
function bindEventListeners() { startButton.addEventListener('click', startRecording); updateCameraSlotsButton.addEventListener('click', handleUpdateCameraSlotsClick); updateFigureSlotsButton.addEventListener('click', handleUpdateFigureSlotsClick); previewPlayPauseButton.addEventListener('click', togglePreview); previewStopButton.addEventListener('click', stopPreview); previewScrubber.addEventListener('input', () => { if (isPreviewing) pausePreview(); currentFrame = parseInt(previewScrubber.value); figureActionSegments = parseSegmentsFromHTML('figure', parseInt(numFigureActionSlotsInput.value)); cameraActionSegments = parseSegmentsFromHTML('camera', parseInt(numCameraActionSlotsInput.value)); updateAndRenderFrame(currentFrame); updatePreviewUI(); }); const staticInputs = [figureScaleInput, lookAtHeightOffsetInput, initialDistanceInput, initialElevationDegInput, initialAzimuthDegInput, fovInput, videoWidthInput, videoHeightInput, numFramesInput, cameraFollowModeSelect]; staticInputs.forEach(i => { if (i) i.addEventListener('change', requestPreviewUpdate); }); numFramesInput.addEventListener('change', updateScrubberMax); bindDynamicSegmentListeners('camera', parseInt(numCameraActionSlotsInput.value)); bindDynamicSegmentListeners('figure', parseInt(numFigureActionSlotsInput.value)); if (dragHandle) dragHandle.addEventListener('mousedown', onDragStart); }
let isDragging = false; function onDragStart(e) { e.preventDefault(); isDragging = true; document.addEventListener('mousemove', onDragging); document.addEventListener('mouseup', onDragEnd); } function onDragging(e) { if (!isDragging) return; const c = document.getElementById('controls'); let n = e.clientX; const s = window.getComputedStyle(c); const min = parseInt(s.minWidth, 10); const max = parseInt(s.maxWidth, 10); if (n < min) n = min; if (n > max) n = max; c.style.width = n + 'px'; } function onDragEnd() { if (!isDragging) return; isDragging = false; document.removeEventListener('mousemove', onDragging); document.removeEventListener('mouseup', onDragEnd); requestPreviewUpdate(); }

window.addEventListener('DOMContentLoaded', () => {
    // 修正点3：使用直接、可靠的方式获取所有HTML元素
    canvasEl = document.getElementById('renderCanvas');
    numFramesInput = document.getElementById('numFrames');
    figureScaleInput = document.getElementById('figureScale');
    lookAtHeightOffsetInput = document.getElementById('lookAtHeightOffset');
    initialDistanceInput = document.getElementById('initialDistance');
    initialElevationDegInput = document.getElementById('initialElevationDeg');
    initialAzimuthDegInput = document.getElementById('initialAzimuthDeg');
    fovInput = document.getElementById('fov');
    outputFormatInput = document.getElementById('outputFormat');
    videoWidthInput = document.getElementById('videoWidth');
    videoHeightInput = document.getElementById('videoHeight');
    fpsInput = document.getElementById('fps');
    startButton = document.getElementById('startButton');
    statusDiv = document.getElementById('status');
    progressBar = document.getElementById('progressBar');
    dragHandle = document.getElementById('drag-handle');
    cameraFollowModeSelect = document.getElementById('cameraFollowMode');
    numCameraActionSlotsInput = document.getElementById('numCameraActionSlots');
    updateCameraSlotsButton = document.getElementById('updateCameraSlotsButton');
    cameraSegmentsContainer = document.getElementById('cameraSegmentsContainer');
    numFigureActionSlotsInput = document.getElementById('numFigureActionSlots');
    updateFigureSlotsButton = document.getElementById('updateFigureSlotsButton');
    figureSegmentsContainer = document.getElementById('figureSegmentsContainer');
    previewPlayPauseButton = document.getElementById('previewPlayPauseButton');
    previewStopButton = document.getElementById('previewStopButton');
    previewScrubber = document.getElementById('previewScrubber');
    previewFrameCounter = document.getElementById('previewFrameCounter');

    if (canvasEl) {
        cameraSegmentsContainer.innerHTML = createCameraActionHTML(parseInt(numCameraActionSlotsInput.value));
        figureSegmentsContainer.innerHTML = createFigureActionHTML(parseInt(numFigureActionSlotsInput.value));
        bindEventListeners();
        initThreeJS(false);
        updateScrubberMax();
        statusDiv.textContent = '就绪。请设置动画参数。';
    } else {
        console.error("Canvas 元素未找到!");
        statusDiv.textContent = '错误：无法初始化3D场景。';
    }
});